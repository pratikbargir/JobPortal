// ws_collage
// options.noCanvas
// options.maxQuality - [bool] if false, do not redraw the entire scene every frame.
// options.maxPreload - [int] maximum preloaded images
// options.transparentBack - [bool]
function ws_collage(options, $IMGs, container){
	var $ = jQuery,
		$this = $(this),
		ul = $('.ws_list', container),
		maxQuality = options.maxQuality || true,
		maxPreload = options.maxPreload || 20,
		useCanvas = !options.noCanvas && document.createElement('canvas').getContext,
		blurLevel = 10,
		transparentBack = false,
		scaleMin = 0.3,
		scaleMax = 0.7,
		angleMin = -180,
		angleMax = 180,
		N = $IMGs.length,
		allImgs = [];


	// Container for a collage
	var effectCont = $('<div>').addClass('ws_effect ws_collage')
		.css({
			position: 'absolute',
			width: '100%',
			height: '100%',
			left: 0,
			top: 0,
			overflow: 'hidden',
			'z-index': 8
		}).appendTo(container);



	/* ALL FUNCTION FOR DRAW */

	// pos = [0..1]
	function fromTo(from, to, pos){
		// pos * (max - min) + min;
		return parseFloat(pos * (to - from) + from);
	}

	// Draw an image (CANVAS/CSS)
	// canvas - ctx, image(obj), k, cur(bool)
	// css    - container, image(obj), k, cur(bool)
	function drawOneImage(scene, item, k){
		var x = k * item.x,
			y = k * item.y,
			w = k * item.width,
			h = k * item.height;

		// CANVAS
		if(useCanvas){
			// save canvas
			scene.save();

				// middle of img
				scene.translate(x + 0.5 * w, y + 0.5 * h);

				// Rotate + scale
				scene.rotate(item.angle * Math.PI/180);
				scene.scale(item.scale, item.scale);

				// draw a img
				if(item.img){
					scene.drawImage(item.img, -0.5 * w, -0.5 * h, w, h);
				}

			// Restore canvas
			scene.restore();
		} else {
		// CSS
			$('<img>')
				.attr('src', item.img)
				.css({
					position: 'absolute',
					width	  : 100 * w / options.width + '%',
					height	  : 100 * h / options.height + '%',
					left 	  : 100 * x / options.width + '%',
					top 	  : 100 * y / options.height + '%'
				})
				.appendTo(scene)
		}
	}

	// Starting rendering scene
	function startEffect(next, cur, k, canvasWidth, canvasHeight, callback){
		var imgNext = allImgs[next],
			imgCur = allImgs[cur],
			start = new Date; // save the start time


		if(useCanvas){
			var imgParams = $($IMGs[cur]);
			imgParams = {
				width: imgParams.width(),
				height: imgParams.height(),
				marginTop: parseFloat(imgParams.css('marginTop')),
				marginLeft: parseFloat(imgParams.css('marginLeft'))
			};
			$(scene).css(imgParams);
		}

		wowAnimate(
			function(progress){
				var scaleProgress = 1 - 2 * progress;
				if (scaleProgress < 0) {
					scaleProgress *= -1;
					if(scaleProgress > 1){
						scaleProgress = 1;
					}
				}
				scaleProgress = jQuery.easing['easeInOutQuad'](1, scaleProgress, 0, 1, 1);
				progress = jQuery.easing['easeInOutQuad'](1, progress, 0, 1, 1);

				// CANVAS
				if(useCanvas){
					// Change the size of the buffer
					buffer.width = canvasWidth;
					buffer.height = canvasHeight;
					// Change the size of the scene
					scene.width = canvasWidth;
					scene.height = canvasHeight;


					// Values ​​for distancing image + approaching background values
						// scale collage
					var sCollage = fromTo(options.width/imgCur.width, options.width/imgNext.width, progress),
						// scale from curent to next image
						sImage = fromTo(0.5, fromTo(1/imgCur.scale, 1/imgNext.scale, progress), scaleProgress),
						// scale background image
						sBack = fromTo(1/imgCur.scale, 1/imgNext.scale, progress),
						// angle, width, height, x, y
						a = fromTo(imgCur.angle, imgNext.angle, progress),
						w = k * imgNext.width,
						h = k * imgNext.height,
						x = k * fromTo(imgCur.x, imgNext.x, progress),
						y = k * fromTo(imgCur.y, imgNext.y, progress);


					/* drawing background */
					if(blurOn && blur){
						buffer.ctx.drawImage(blur, 0, 0, canvasWidth, canvasHeight);
						buffer.ctx.save();

							// middle of img
							buffer.ctx.translate(x + 0.5 * w, y + 0.5 * h);

								// Turn to the picture
								buffer.ctx.rotate(- a * Math.PI/180);
								buffer.ctx.scale(sBack, sBack);

							// Return to the starting point
							buffer.ctx.translate(-(x + 0.5 * w), -(y + 0.5 * h));

							// Drawing offset and zoom in / out
							buffer.ctx.transform(sBack, 0, 0, sBack, -x * sBack, -y * sBack);
							buffer.ctx.drawImage(blur, -canvasWidth, -canvasHeight, canvasWidth * 4, canvasHeight * 4);

						buffer.ctx.restore();
					}
					/* /drawing background */

					/* approximation to the picture */
						// approaching picture
						buffer.ctx.transform(sCollage, 0, 0, sCollage, -x * sCollage, -y * sCollage);

						// middle of img
						buffer.ctx.translate(x + 0.5 * w, y + 0.5 * h);

							// Turn to the picture
							buffer.ctx.rotate(-a * Math.PI/180);
							// Approaching the picture
							buffer.ctx.scale(sImage, sImage);

						// Return to the starting point
						buffer.ctx.translate(-(x + 0.5 * w), -(y + 0.5 * h));
					/* /approximation to the picture */




					// make transparency
					buffer.ctx.globalAlpha = fromTo(0.2, 1, scaleProgress);

					// The buffer is filled with all pictures
					if(maxQuality){
						for(i in allImgs){
							drawOneImage(buffer.ctx, allImgs[i], k);
						}
					} else {
						buffer.ctx.drawImage(bufferImgs, 0, 0);
					}

					// remove transparency
					buffer.ctx.globalAlpha = 1;



					// Draw with fade following picture that it was above to other
					buffer.ctx.globalAlpha = fromTo(0, 1, scaleProgress);
					drawOneImage(buffer.ctx, imgNext, k);
					// Draw with fade previous image so that it acquired its former state
					buffer.ctx.globalAlpha = fromTo(1, 0, progress * 2>1?1:progress * 2);
					drawOneImage(buffer.ctx, imgCur, k);
					// remove transparency
					buffer.ctx.globalAlpha = 1;

					// Draw the scene from the buffer
					scene.ctx.drawImage(buffer, 0, 0);
				}


				// CSS3
				else {
					var s = fromTo(2, canvasWidth/(imgCur.width*k), scaleProgress),
						x = -k * fromTo(imgCur.x, imgNext.x, progress) * s,
						y = -k * fromTo(imgCur.y, imgNext.y, progress) * s,
						w = canvasWidth * s,
						h = canvasHeight * s;

					scene.css({
						left: x,
						top: y,
						width: w,
						height: h
					});
				}

				// Show block scene
				effectCont.show();
			}, 0, 1,
			options.duration,
			function() {
				callback();
			}
		);
	}

	// Image preloader
	function preloadImg(cur, max, minQuality, ctx, noRedraw){
		if (cur > max || !allImgs[cur] || allImgs[cur].img) {
			return;
		}

		var img = new Image();

		img.onload = function(){
			allImgs[cur].img = img;

			if(minQuality && cur != noRedraw[0] && cur != noRedraw[1]){
				drawOneImage(ctx, allImgs[cur], 1);

				preloadImg(cur+1, max, true, ctx, noRedraw);
			} else {
				preloadImg(cur+1, max, false);
			}
		};
		img.onerror = function(){
			if(minQuality && cur != noRedraw[0] && cur != noRedraw[1]){
				drawOneImage(ctx, allImgs[cur], 1);

				preloadImg(cur+1, max, true, ctx, noRedraw);
			} else {
				preloadImg(cur+1, max, false);
			}
		};

		img.src = $IMGs[cur].src;
		
	};

	/* /ALL FUNCTION FOR DRAW */



	// init parameters for the first image (width, height are the same for all images)
	var initX = 0,
		initY = 0,
		initW = options.width/(Math.sqrt(N) + 1),
		initH = options.height/(Math.sqrt(N) + 1),
		initMaxCols = Math.floor(options.width / initW);
	// Write the parameters of all the images in array
	for(i = 0; i < N; i++){
		// If the current picture is not intermeddle, linebreaks
		if(initW + initX > initW * initMaxCols){
			initY = Math.floor(initW * (i + 1) / options.width) * initH;
			initX = 0;
		}

		// Coordinates
		allImgs[i] = {
			x 		: initX,
			y 		: initY,
			width	: initW,
			height	: initH,
			img 	: null
		}
		
		// Params for canvas
		if(useCanvas){
			allImgs[i].scale = fromTo(scaleMin, scaleMax, Math.random());
			allImgs[i].angle = fromTo(angleMin, angleMax, Math.random());
		}

		initX += parseFloat(initW);
	}

	// Shuffle parameters for images
	for(var j, x, i = allImgs.length; i; j = parseInt(Math.random() * i), x = allImgs[--i], allImgs[i] = allImgs[j], allImgs[j] = x);


	// init CANVAS
	if(useCanvas){
		var scene = $('<canvas>')[0];
			scene.ctx = scene.getContext('2d');
			scene.width = effectCont.width();
			scene.height = effectCont.height();

		var buffer = $('<canvas>')[0];
			buffer.ctx = buffer.getContext('2d');
			buffer.width = effectCont.width();
			buffer.height = effectCont.height();

		var blur = $('<canvas>')[0];
			blur.ctx = blur.getContext('2d');
			blur.width = effectCont.width();
			blur.height = effectCont.height();

		if(!maxQuality){
			var bufferImgs = $('<canvas>')[0];
				bufferImgs.ctx = bufferImgs.getContext('2d');
				bufferImgs.width = effectCont.width();
				bufferImgs.height = effectCont.height();
		}

		effectCont.append(scene);
	}

	// init CSS3
	else {
		var scene = effectCont.clone().removeClass('ws_effect').css({
			overflow: 'visible'
		});
		effectCont.css('display', 'none').append(scene);


		// init one time, no need redraw
		for(i in allImgs){
			allImgs[i].img = $IMGs[i].src;
			drawOneImage(scene, allImgs[i], 1);
		}

		// additional images init
		// ie8 fixed bug:
		// 		num1 = num2;
		// 		num1 % num2 = undefined
		var startBottom = (N % initMaxCols == 'undefined' ? 0 : N % initMaxCols);
			startRight = 0,
			bottomAddCount = 2 * initMaxCols - startBottom,
			rightAddCount = Math.ceil(N / initMaxCols) + 1;
		// console.log(startBottom, bottomAddCount, rightAddCount);

		// add bottom images
		for(var i = 0; i < bottomAddCount; i++){
			drawOneImage(scene, {
				img 	: $IMGs[i % $IMGs.length].src,
				width	: initW,
				height	: initH,
				x 		: initW * ((startBottom + i) % initMaxCols),
				y 		: initY + Math.floor((startBottom + i) / initMaxCols) * initH
			}, 1);
		}
		// add right images
		for(var i = 0; i < bottomAddCount; i++){
			drawOneImage(scene, {
				img 	: $IMGs[i % $IMGs.length].src,
				width	: initW,
				height	: initH,
				x 		: initW * initMaxCols,
				y 		: i * initH
			}, 1);
		}
		/*
		for(var i; i < initMaxCols * 2; i++){

		}
		/*
		var initX = 0,
			initY = 0,
			initW = options.width/(Math.sqrt(N) + 1),
			initH = options.height/(Math.sqrt(N) + 1),
			initMaxCols = Math.floor(options.width / initW);
		*/
	}

	var thread,
		blurOn;
	this.go = function(next, cur){
		if(thread) return -1;

		// if on-demand
		if(options.images) {
			allImgs[next].img = $IMGs[next];
		}
		
		// ie7+
		if(window.XMLHttpRequest){
			// preload imgs
			if(useCanvas){
				var maxW = options.width, 
					maxH = options.height,

					// Relative values ​​(for responsive)
					k = 1;

				preloadImg(cur, cur, false);
				preloadImg(next, next, false);
				if(maxQuality){
					preloadImg(2, maxPreload + 1, false);
				} else {
					bufferImgs.width = maxW;
					bufferImgs.height = maxH;

					preloadImg(2, maxPreload + 1, true, bufferImgs.ctx, [cur, next]);
				}

				// Draw blur background of random images
				if(!blurOn && !transparentBack){
					rand = Math.round( fromTo(0, N-1, Math.random()) );

					// if the picture width id 'rand' loading, can draw from her background
					blur.width = effectCont.width();
					blur.height = effectCont.height();

					blurOn = getBlur($($IMGs[rand]), blurLevel, blur);
				}
			} else {
				var maxW = container.width(),
					maxH = container.height(),

					// Relative values ​​(for responsive)
					k = maxW/options.width;
			}

			// start effect
			// id(next img), id(cur img), k(responsive), cur width, cur height
			thread = new startEffect(next, cur, k, maxW, maxH, function callback(){
				$this.trigger('effectEnd');
				effectCont.hide();
				thread = 0;

				// remove images from memory
				if(!maxQuality && useCanvas){
					for(k in allImgs){
						allImgs[k].img = null;
					}
				}
			});
		} else {
			thread = 0;
			ul.stop(true).animate(
				// opera do bug for "0%"
				// safari (win?) do bug for 0
				{left: (next?-next+"00%":(/Safari/.test(navigator.userAgent)?"0%":0))},
				options.duration,
				"easeInOutExpo",
				function() {$this.trigger('effectEnd');}
			);
		}
	}






	// Functions to blur canvas pictures
	function getBlur(img, depth, canvas){
		if (useCanvas){
			canvas.ctx.drawImage(img.get(0), 0, 0);
			if (!stackBlurCanvasRGB( canvas.ctx, 0, 0, canvas.width, canvas.height, depth)){
				canvas.ctx.drawImage(img.get(0), 0, 0);
			}
			
			return true;
			// return $(canvas);
		};

		return cont;
	};
	
	/*
		StackBlur - a fast almost Gaussian Blur For Canvas
		Version: 	0.5
		Website:	http://www.quasimondo.com/StackBlurForCanvas
	*/
	var mul_table = [
			512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,
			454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,
			482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,
			437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,
			497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,
			320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,
			446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,
			329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,
			505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,
			399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,
			324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,
			268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,
			451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,
			385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,
			332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,
			289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];
	var shg_table = [
			 9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 
			17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 
			19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,
			20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
			21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
			21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 
			22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
			22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 
			23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
			23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
			23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
			23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];



	function stackBlurCanvasRGB( context, top_x, top_y, width, height, radius )
	{
		if ( isNaN(radius) || radius < 1 ) return;
		radius |= 0;
		

		var imageData;
		
		try {
			imageData = context.getImageData( top_x, top_y, width, height );
		} catch(e) {
			console.log("error:unable to access image data: " + e)
			return false;
		}
				
		var pixels = imageData.data;
				
		var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum,
		r_out_sum, g_out_sum, b_out_sum,
		r_in_sum, g_in_sum, b_in_sum,
		pr, pg, pb, rbs;
				
		var div = radius + radius + 1;
		var w4 = width << 2;
		var widthMinus1  = width - 1;
		var heightMinus1 = height - 1;
		var radiusPlus1  = radius + 1;
		var sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2;
		
		var stackStart = new BlurStack();
		var stack = stackStart;
		for ( i = 1; i < div; i++ )
		{
			stack = stack.next = new BlurStack();
			if ( i == radiusPlus1 ) var stackEnd = stack;
		}
		stack.next = stackStart;
		var stackIn = null;
		var stackOut = null;
		
		yw = yi = 0;
		
		var mul_sum = mul_table[radius];
		var shg_sum = shg_table[radius];
		
		for ( y = 0; y < height; y++ )
		{
			r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;
			
			r_out_sum = radiusPlus1 * ( pr = pixels[yi] );
			g_out_sum = radiusPlus1 * ( pg = pixels[yi+1] );
			b_out_sum = radiusPlus1 * ( pb = pixels[yi+2] );
			
			r_sum += sumFactor * pr;
			g_sum += sumFactor * pg;
			b_sum += sumFactor * pb;
			
			stack = stackStart;
			
			for( i = 0; i < radiusPlus1; i++ )
			{
				stack.r = pr;
				stack.g = pg;
				stack.b = pb;
				stack = stack.next;
			}
			
			for( i = 1; i < radiusPlus1; i++ )
			{
				p = yi + (( widthMinus1 < i ? widthMinus1 : i ) << 2 );
				r_sum += ( stack.r = ( pr = pixels[p])) * ( rbs = radiusPlus1 - i );
				g_sum += ( stack.g = ( pg = pixels[p+1])) * rbs;
				b_sum += ( stack.b = ( pb = pixels[p+2])) * rbs;
				
				r_in_sum += pr;
				g_in_sum += pg;
				b_in_sum += pb;
				
				stack = stack.next;
			}
			
			
			stackIn = stackStart;
			stackOut = stackEnd;
			for ( x = 0; x < width; x++ )
			{
				pixels[yi]   = (r_sum * mul_sum) >> shg_sum;
				pixels[yi+1] = (g_sum * mul_sum) >> shg_sum;
				pixels[yi+2] = (b_sum * mul_sum) >> shg_sum;
				
				r_sum -= r_out_sum;
				g_sum -= g_out_sum;
				b_sum -= b_out_sum;
				
				r_out_sum -= stackIn.r;
				g_out_sum -= stackIn.g;
				b_out_sum -= stackIn.b;
				
				p =  ( yw + ( ( p = x + radius + 1 ) < widthMinus1 ? p : widthMinus1 ) ) << 2;
				
				r_in_sum += ( stackIn.r = pixels[p]);
				g_in_sum += ( stackIn.g = pixels[p+1]);
				b_in_sum += ( stackIn.b = pixels[p+2]);
				
				r_sum += r_in_sum;
				g_sum += g_in_sum;
				b_sum += b_in_sum;
				
				stackIn = stackIn.next;
				
				r_out_sum += ( pr = stackOut.r );
				g_out_sum += ( pg = stackOut.g );
				b_out_sum += ( pb = stackOut.b );
				
				r_in_sum -= pr;
				g_in_sum -= pg;
				b_in_sum -= pb;
				
				stackOut = stackOut.next;

				yi += 4;
			}
			yw += width;
		}

		
		for ( x = 0; x < width; x++ )
		{
			g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;
			
			yi = x << 2;
			r_out_sum = radiusPlus1 * ( pr = pixels[yi]);
			g_out_sum = radiusPlus1 * ( pg = pixels[yi+1]);
			b_out_sum = radiusPlus1 * ( pb = pixels[yi+2]);
			
			r_sum += sumFactor * pr;
			g_sum += sumFactor * pg;
			b_sum += sumFactor * pb;
			
			stack = stackStart;
			
			for( i = 0; i < radiusPlus1; i++ )
			{
				stack.r = pr;
				stack.g = pg;
				stack.b = pb;
				stack = stack.next;
			}
			
			yp = width;
			
			for( i = 1; i <= radius; i++ )
			{
				yi = ( yp + x ) << 2;
				
				r_sum += ( stack.r = ( pr = pixels[yi])) * ( rbs = radiusPlus1 - i );
				g_sum += ( stack.g = ( pg = pixels[yi+1])) * rbs;
				b_sum += ( stack.b = ( pb = pixels[yi+2])) * rbs;
				
				r_in_sum += pr;
				g_in_sum += pg;
				b_in_sum += pb;
				
				stack = stack.next;
			
				if( i < heightMinus1 )
				{
					yp += width;
				}
			}
			
			yi = x;
			stackIn = stackStart;
			stackOut = stackEnd;
			for ( y = 0; y < height; y++ )
			{
				p = yi << 2;
				pixels[p]   = (r_sum * mul_sum) >> shg_sum;
				pixels[p+1] = (g_sum * mul_sum) >> shg_sum;
				pixels[p+2] = (b_sum * mul_sum) >> shg_sum;
				
				r_sum -= r_out_sum;
				g_sum -= g_out_sum;
				b_sum -= b_out_sum;
				
				r_out_sum -= stackIn.r;
				g_out_sum -= stackIn.g;
				b_out_sum -= stackIn.b;
				
				p = ( x + (( ( p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1 ) * width )) << 2;
				
				r_sum += ( r_in_sum += ( stackIn.r = pixels[p]));
				g_sum += ( g_in_sum += ( stackIn.g = pixels[p+1]));
				b_sum += ( b_in_sum += ( stackIn.b = pixels[p+2]));
				
				stackIn = stackIn.next;
				
				r_out_sum += ( pr = stackOut.r );
				g_out_sum += ( pg = stackOut.g );
				b_out_sum += ( pb = stackOut.b );
				
				r_in_sum -= pr;
				g_in_sum -= pg;
				b_in_sum -= pb;
				
				stackOut = stackOut.next;
				
				yi += width;
			}
		}
		
		context.putImageData( imageData, top_x, top_y );
		return true;
	}

	function BlurStack()
	{
		this.r = 0;
		this.g = 0;
		this.b = 0;
		this.a = 0;
		this.next = null;
	}
};


jQuery.extend( jQuery.easing, {
	easeInOutQuad: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t + b;
		return -c/2 * ((--t)*(t-2) - 1) + b;
	}
});