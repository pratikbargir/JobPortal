// blur
// options.noCanvas - stop using canvas
function ws_blur(options, images, container){
	var $ = jQuery;
	var $this = $(this);
	var effectCont = $('<div>').addClass('ws_effect ws_blur').css({
		position: 'absolute',
		overflow: 'hidden',
		top: 0,
		left: 0,
		width: '100%',
		height: '100%'
	}).appendTo(container);
	
	var useCanvas = !options.noCanvas && !window.opera && !!document.createElement("canvas").getContext;
	if (useCanvas){
		try {
			document.createElement("canvas").getContext('2d').getImageData( 0, 0, 1, 1 );
		} catch(e) {
			useCanvas = 0;
		}
	};
	
	var canvas;

	function fadeIn(obj,dur,callback){
		wowAnimate(obj.css({visibility:'visible'}),
			{opacity: 0}, {opacity: 1}, dur, callback
		);
	};
	function fadeOut(obj,dur,callback){
		wowAnimate(obj,
			{opacity: 1}, {opacity: 0}, dur, callback
		);
	};

	
	var busy;
	this.go = function(new_index,curIdx){
		if (busy) return -1;
		busy=1;
		var curImg = $(images.get(curIdx)),
			newImg = $(images.get(new_index)),
			canvasCss = {
				width: curImg.width(),
				height: curImg.height(),
				marginTop: curImg.css('marginTop'),
				marginLeft: curImg.css('marginLeft')
			};
		
		var curBlur;
		if (useCanvas){
			// pre-create canvases
			if (!canvas) {
				canvas='<canvas width="'+canvasCss.width+'" height="'+canvasCss.height+'"/>';
				canvas = $(canvas+canvas).css({
					'z-index':8, // see wowslider.js first comment
					position:'absolute',
					left:0,
					top:0,
					visibility:'hidden'
				}).appendTo(effectCont);
			}

			canvas.css(canvasCss).attr({width: canvasCss.width, height: canvasCss.height});
			
			// prepare blur
			curBlur = blur(curImg, canvasCss, 30, canvas.get(0));
		};
		
		if (useCanvas && curBlur){
			var newBlur = blur(newImg, canvasCss, 30, canvas.get(1));
			
			// change images
			fadeIn(curBlur,options.duration/3, function(){
				container.find('.ws_list').css({visibility:'hidden'});
				fadeOut(curBlur,options.duration/6);
				fadeIn(newBlur,options.duration/6,function(){
					curBlur.css({visibility:'hidden'});
					container.find('.ws_list').css({visibility:'visible'});
					$this.trigger('effectEnd', {delay: options.duration/2});
					fadeOut(newBlur,options.duration/2,function(){
						busy=0;
					});
				});
			});
		}
		else{
			useCanvas = 0; // correct useCanvas if curBlur with useCanvas=1 don't work
			curBlur = blur(curImg, canvasCss, 8);
			//newBlur = blur(newImg, 5);
				
			// apply cur blur
			curBlur.fadeIn(options.duration/3,"linear",function(){
				$this.trigger('effectEnd', {delay: options.duration/3});
				curBlur.fadeOut(options.duration/3,"linear",function(){
					curBlur.remove();
					busy=0;
				});
				
			});
		}
	}
	

	// create blur for image
	function blur(img, canvasCss, depth,canvas){
		var zIndex=(parseInt(img.parent().css('z-index')) || 0) + 1;// z-index of blur element

		if (useCanvas){
	
			var ctx = canvas.getContext('2d');
			ctx.drawImage(img.get(0), 0, 0, canvasCss.width, canvasCss.height);
			if (!stackBlurCanvasRGB( ctx, 0, 0, canvas.width, canvas.height, depth))
				return 0;
			
			return $(canvas);
		};
	

		// --------------- create blur with some images ------------------
		// blur content
		var cont =  $('<div></div>').css({
			position	:'absolute',
			'z-index'	: zIndex,
			left 		: 0,
			top 		: 0,
			display		: 'none'
		}).css(canvasCss).appendTo(effectCont);
		
		// prepare
		var fi = (Math.sqrt(5)+1)/2;// 1.618033988749895
		var dr = 1-fi/2; // delta of angle
		
		// create blur images
		for (var i=0; dr*i<depth; i++){
			// using golden ratio
			var al = Math.PI*fi*i;
			var r=(dr*i+1);
			var x = r*Math.cos(al);
			var y = r*Math.sin(al);
			// using random
			//var r=depth;
			//var x = -r+(r*2)*Math.random();
			//var y = -r+(r*2)*Math.random();
			
			// create new
			$(document.createElement("img")).attr('src',img.attr('src')).css({
				opacity 	: 1/(i/1.8+1),
				position	:'absolute',
				'z-index'	: zIndex,
				left 		: Math.round(x)+'px',
				top 		: Math.round(y)+'px',
				width 		: '100%',
				height 		: '100%'
			}).appendTo(cont);		
		};
		
		return cont;
	};
	
	
	
	/*
		StackBlur - a fast almost Gaussian Blur For Canvas
		Version: 	0.5
		Website:	http://www.quasimondo.com/StackBlurForCanvas
	*/
	var mul_table = [
			512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,
			454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,
			482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,
			437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,
			497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,
			320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,
			446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,
			329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,
			505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,
			399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,
			324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,
			268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,
			451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,
			385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,
			332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,
			289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];
	var shg_table = [
			 9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 
			17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 
			19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,
			20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
			21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
			21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 
			22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
			22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 
			23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
			23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
			23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
			23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];



	function stackBlurCanvasRGB( context, top_x, top_y, width, height, radius )
	{
		if ( isNaN(radius) || radius < 1 ) return;
		radius |= 0;
		

		var imageData;
		
		try {
			imageData = context.getImageData( top_x, top_y, width, height );
		} catch(e) {
			console.log("error:unable to access image data: " + e)
			return false;
		}
				
		var pixels = imageData.data;
				
		var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum,
		r_out_sum, g_out_sum, b_out_sum,
		r_in_sum, g_in_sum, b_in_sum,
		pr, pg, pb, rbs;
				
		var div = radius + radius + 1;
		var w4 = width << 2;
		var widthMinus1  = width - 1;
		var heightMinus1 = height - 1;
		var radiusPlus1  = radius + 1;
		var sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2;
		
		var stackStart = new BlurStack();
		var stack = stackStart;
		for ( i = 1; i < div; i++ )
		{
			stack = stack.next = new BlurStack();
			if ( i == radiusPlus1 ) var stackEnd = stack;
		}
		stack.next = stackStart;
		var stackIn = null;
		var stackOut = null;
		
		yw = yi = 0;
		
		var mul_sum = mul_table[radius];
		var shg_sum = shg_table[radius];
		
		for ( y = 0; y < height; y++ )
		{
			r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;
			
			r_out_sum = radiusPlus1 * ( pr = pixels[yi] );
			g_out_sum = radiusPlus1 * ( pg = pixels[yi+1] );
			b_out_sum = radiusPlus1 * ( pb = pixels[yi+2] );
			
			r_sum += sumFactor * pr;
			g_sum += sumFactor * pg;
			b_sum += sumFactor * pb;
			
			stack = stackStart;
			
			for( i = 0; i < radiusPlus1; i++ )
			{
				stack.r = pr;
				stack.g = pg;
				stack.b = pb;
				stack = stack.next;
			}
			
			for( i = 1; i < radiusPlus1; i++ )
			{
				p = yi + (( widthMinus1 < i ? widthMinus1 : i ) << 2 );
				r_sum += ( stack.r = ( pr = pixels[p])) * ( rbs = radiusPlus1 - i );
				g_sum += ( stack.g = ( pg = pixels[p+1])) * rbs;
				b_sum += ( stack.b = ( pb = pixels[p+2])) * rbs;
				
				r_in_sum += pr;
				g_in_sum += pg;
				b_in_sum += pb;
				
				stack = stack.next;
			}
			
			
			stackIn = stackStart;
			stackOut = stackEnd;
			for ( x = 0; x < width; x++ )
			{
				pixels[yi]   = (r_sum * mul_sum) >> shg_sum;
				pixels[yi+1] = (g_sum * mul_sum) >> shg_sum;
				pixels[yi+2] = (b_sum * mul_sum) >> shg_sum;
				
				r_sum -= r_out_sum;
				g_sum -= g_out_sum;
				b_sum -= b_out_sum;
				
				r_out_sum -= stackIn.r;
				g_out_sum -= stackIn.g;
				b_out_sum -= stackIn.b;
				
				p =  ( yw + ( ( p = x + radius + 1 ) < widthMinus1 ? p : widthMinus1 ) ) << 2;
				
				r_in_sum += ( stackIn.r = pixels[p]);
				g_in_sum += ( stackIn.g = pixels[p+1]);
				b_in_sum += ( stackIn.b = pixels[p+2]);
				
				r_sum += r_in_sum;
				g_sum += g_in_sum;
				b_sum += b_in_sum;
				
				stackIn = stackIn.next;
				
				r_out_sum += ( pr = stackOut.r );
				g_out_sum += ( pg = stackOut.g );
				b_out_sum += ( pb = stackOut.b );
				
				r_in_sum -= pr;
				g_in_sum -= pg;
				b_in_sum -= pb;
				
				stackOut = stackOut.next;

				yi += 4;
			}
			yw += width;
		}

		
		for ( x = 0; x < width; x++ )
		{
			g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;
			
			yi = x << 2;
			r_out_sum = radiusPlus1 * ( pr = pixels[yi]);
			g_out_sum = radiusPlus1 * ( pg = pixels[yi+1]);
			b_out_sum = radiusPlus1 * ( pb = pixels[yi+2]);
			
			r_sum += sumFactor * pr;
			g_sum += sumFactor * pg;
			b_sum += sumFactor * pb;
			
			stack = stackStart;
			
			for( i = 0; i < radiusPlus1; i++ )
			{
				stack.r = pr;
				stack.g = pg;
				stack.b = pb;
				stack = stack.next;
			}
			
			yp = width;
			
			for( i = 1; i <= radius; i++ )
			{
				yi = ( yp + x ) << 2;
				
				r_sum += ( stack.r = ( pr = pixels[yi])) * ( rbs = radiusPlus1 - i );
				g_sum += ( stack.g = ( pg = pixels[yi+1])) * rbs;
				b_sum += ( stack.b = ( pb = pixels[yi+2])) * rbs;
				
				r_in_sum += pr;
				g_in_sum += pg;
				b_in_sum += pb;
				
				stack = stack.next;
			
				if( i < heightMinus1 )
				{
					yp += width;
				}
			}
			
			yi = x;
			stackIn = stackStart;
			stackOut = stackEnd;
			for ( y = 0; y < height; y++ )
			{
				p = yi << 2;
				pixels[p]   = (r_sum * mul_sum) >> shg_sum;
				pixels[p+1] = (g_sum * mul_sum) >> shg_sum;
				pixels[p+2] = (b_sum * mul_sum) >> shg_sum;
				
				r_sum -= r_out_sum;
				g_sum -= g_out_sum;
				b_sum -= b_out_sum;
				
				r_out_sum -= stackIn.r;
				g_out_sum -= stackIn.g;
				b_out_sum -= stackIn.b;
				
				p = ( x + (( ( p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1 ) * width )) << 2;
				
				r_sum += ( r_in_sum += ( stackIn.r = pixels[p]));
				g_sum += ( g_in_sum += ( stackIn.g = pixels[p+1]));
				b_sum += ( b_in_sum += ( stackIn.b = pixels[p+2]));
				
				stackIn = stackIn.next;
				
				r_out_sum += ( pr = stackOut.r );
				g_out_sum += ( pg = stackOut.g );
				b_out_sum += ( pb = stackOut.b );
				
				r_in_sum -= pr;
				g_in_sum -= pg;
				b_in_sum -= pb;
				
				stackOut = stackOut.next;
				
				yi += width;
			}
		}
		
		context.putImageData( imageData, top_x, top_y );
		return true;
	}

	function BlurStack()
	{
		this.r = 0;
		this.g = 0;
		this.b = 0;
		this.a = 0;
		this.next = null;
	}

	
}
