// ws_cube
// options.direction - left,right,down,up
// use: Modernizr library
// based on: http://alexdunphy.github.io/refineslide/demo.html
// shadow algorithm from : http://tympanus.net/Tutorials/3DShadingWithBoxShadows/
// create .ws_effect
// options.fallback 
function ws_cube(options, images, container){
	var $ = jQuery,
		$this = $(this),
		wowsliderProg = /WOW Slider/g.test(navigator.userAgent),
		// no use shadow on mobile and in programm WOW Slider
		useShadow = !(/iPhone|iPod|iPad|Android|BlackBerry/).test(navigator.userAgent) && !wowsliderProg,
		ul = $('.ws_list', container),
		perspective = options.perspective || 2000,
		fullContCSS = {
			position:'absolute',
			backgroundSize: 'cover',
			left:0,
			top:0,
			width: '100%',
			height: '100%',
			backfaceVisibility : 'hidden'
		};
		
	// Obj to check browser capabilities
	var testBrowser = {
        // Browser vendor DOM prefixes
        //domPrefixes: ['', 'Webkit', 'Moz', 'ms', 'O', 'Khtml']
        domPrefixes: ' Webkit Moz ms O Khtml'.split(' ')

        // Method to iterate over a property (using all DOM prefixes)
        // Returns true if prop is recognised by browser (else returns false)
        ,testDom: function (prop) {
            var i = this.domPrefixes.length;

            while (i--) {
                if (typeof document.body.style[this.domPrefixes[i] + prop] !== 'undefined') {
                    return true;
                }
            }

            return false;
        }

        ,cssTransitions: function () {
            // Use testDom method to check prop (returns bool)
            return this.testDom('Transition');
        }

        ,cssTransforms3d: function () {
            // Check for vendor-less prop
			var ret = (typeof document.body.style['perspectiveProperty'] !== 'undefined') 
            // Use testDom method to check prop (returns bool)
					|| this.testDom('Perspective');
			

			// webkit has 3d transforms disabled for chrome, though
			//   it works fine in safari on leopard and snow leopard
			// as a result, it 'recognizes' the syntax and throws a false positive
			// thus we must do a more thorough check:
			if (ret && /AppleWebKit/.test(navigator.userAgent)) {
				var div = document.createElement('div'),
					st = document.createElement('style'),
					id = 'Test3d'+Math.round(Math.random()*99999);
				// webkit allows this media query to succeed only if the feature is enabled.    
				// "@media (transform-3d),(-o-transform-3d),(-moz-transform-3d),(-ms-transform-3d),(-webkit-transform-3d),(modernizr){#modernizr{height:3px}}"
				st.textContent = '@media (-webkit-transform-3d){#'+id+'{height:3px}}';
				document.getElementsByTagName('head')[0].appendChild(st);
				div.id = id;
				document.body.appendChild(div);
				
				ret = div.offsetHeight === 3;
				
				st.parentNode.removeChild(st);
				div.parentNode.removeChild(div);
			}
			return ret;
        },
        webkit: function(){
        	return /AppleWebKit/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);
        }
    };	
	
	// Fallback if browser does not support 3d transforms/CSS transitions
	// ie11 - navigator.userAgent.match(/Trident\/7\./)
	var support3d = (testBrowser.cssTransitions() && testBrowser.cssTransforms3d()),
		webkit = testBrowser.webkit();

	var effectCont = $('<div>')
		.css(fullContCSS)
		.css({
			transformStyle: 'preserve-3d',
			perspective: (webkit&&!wowsliderProg?'none':perspective),
			zIndex:8
		});
	
	$('<div>').addClass('ws_effect ws_cube')
		.css(fullContCSS)
		.append(effectCont)
		.appendTo(container);
	
	if (!support3d && options.fallback)
		return new options.fallback(options, images, container);
	
	// css shadow propery for shadow side
	function shadow(w, h, rx, ry){
		return 'inset '
			+ (-ry*w*1.2/90)+'px '
			+ (rx*h*1.2/90)+'px '
			+ (w+h)/20+'px '//tz/3
			+ 'rgba(' + ((rx<ry)? '0,0,0,.6': (rx>ry)?'255,255,255,0.8': '0,0,0,.0') + ')';
	}
	
	var thread;
	this.go = function(new_index, curIdx){
		var imgParams = $(images[curIdx]);
			imgParams = {
				width: imgParams.width(),
				height: imgParams.height(),
				marginTop: parseFloat(imgParams.css('marginTop')),
				marginLeft: parseFloat(imgParams.css('marginLeft'))
			};
		// Args: translateZ, (next slide) translateX, (next slide) translateY, (next slide) rotateX, (next slide) rotateY, (wrap) rotateX, (wrap) rotateY
		function cube(cont, slides, tz, ntx, nty, nrx, nry, wrx, wry, callback){
			cont.parent().css('perspective', perspective);
			
			var w=cont.width(),
				h=cont.height();
			
			//console.log([tz/3,w,h,(w+h)/20,(-ry*w*1.2/90), (rx*h*1.2/90)])
			
			// props for slide <li>s -
			slides.front.css({ // current image
				transform : 'translate3d(0,0,0) rotateY(0deg) rotateX(0deg)'
			});
			
			// props for next slide <li>
			slides.back.css({ // new image
				opacity : 1,
				transform : 'translate3d(0,0,0) rotateY('+ nry +'deg) rotateX('+ nrx +'deg)'
			});

			// add box shadow to non-mobile and no in programm
			if(useShadow) {
				var frontShadow = $('<div>').css(fullContCSS).css('boxShadow', shadow(w, h, 0, 0))
				.appendTo(slides.front);

				var backShadow = $('<div>').css(fullContCSS).css('boxShadow', shadow(w,h, nrx, nry))
				.appendTo(slides.back);
			}

			// windows safari fix and detect if no wowslider.exe :)
			if(webkit && !/WOW Slider/g.test(navigator.userAgent)){
				// props for slider <ul>
				cont.css({
					transform: 'translateZ(-' + tz + 'px)'
				});
			}
			
			var proc = setTimeout(function(){ // delay for css3d apply
				// Execution steps
				var transition = 'all ' + options.duration + 'ms cubic-bezier(0.645, 0.045, 0.355, 1.000)' /* easeInOutCubic */ ;
				
				slides.front.css({
					transition: transition,
					boxShadow: useShadow?shadow(w, h, wrx, wry):'',
					transform: 'rotateX('+ wrx +'deg) rotateY('+ wry +'deg)',
					zIndex: 0
				});
				
				slides.back.css({
					transition: transition,
					boxShadow: useShadow?shadow(w, h, 0, 0):'',
					transform : 'rotateY(0deg) rotateX(0deg)',
					zIndex: 20
				});

				// add box shadow
				if(useShadow) {
					frontShadow.css({
						transition: transition,
						boxShadow: shadow(w, h, wrx, wry)
					});
					backShadow.css({
						transition: transition,
						boxShadow: shadow(w, h, 0, 0)
					});
				}
				
				proc = setTimeout(callback, options.duration);
			},20);
			
			return {
				stop: function (){
					clearTimeout(proc);
					callback();
				}
			}
		}
	
		
		if (support3d){ 
		
			if (thread) thread.stop();


			var w = container.width(),
				h = container.height();

			var params = {
					left:	[w/2, w/2, 	0, 		0,  	90, 	0, 		-90],
					right:	[w/2, -w/2, 0, 		0,  	-90,	0,  	90],
					down:	[h/2, 0, 	-h/2, 	90, 	0,  	-90,	0],
					up:		[h/2, 0, 	h/2, 	-90,	0,  	90, 	0]
				}
				[ options.direction || ['left','right','down','up'][Math.floor(Math.random()*4)] ];
			

			var curImg = $('<img>').css(imgParams),
				nextImg = $('<img>').css(imgParams).attr('src', images.get(new_index).src);
			

			var curCont = $('<div>').css({
					overflow: 'hidden',
					transformOrigin: '50% 50% -'+params[0]+'px',
					zIndex: 20
				}).css(fullContCSS)
				.append(curImg).appendTo(effectCont)
			var nextCont = $('<div>').css({
					overflow: 'hidden',
					transformOrigin: '50% 50% -'+params[0]+'px',
					zIndex: 0
				}).css(fullContCSS)
				.append(nextImg).appendTo(effectCont)


			// prevent webkit blinking
			curImg.on('load', function() {
				ul.hide();
			});
			curImg.attr('src', images.get(curIdx).src).load();

			effectCont.parent().show();
			
			thread = new cube(effectCont,{front: curCont, back: nextCont}, 
				params[0],params[1],params[2],params[3],params[4],params[5],params[6],
				function(){
					$this.trigger('effectEnd');
					effectCont.empty().parent().hide();
					thread =0;
				}
			)
		}
		else{ // Fallback if browser does not support 3d transforms/CSS transitions
			// create tempory box
			effectCont.css({
				position:'absolute',
				display:'none',
				zIndex:2,
				width: '100%',
				height: '100%'
			});
			
			
			effectCont.stop(1,1);
			var dir = (!!((new_index-curIdx+1)%images.length)^options.revers?'left':'right');
			
			// add current image
			var curCont = $('<div>').css({
					position:'absolute',left:'0%',right:'auto',top:0,width:'100%', height:'100%'
				}).css(dir,0)
				.append($(images[curIdx]).clone().css({
					width: 100*imgParams.width/container.width()+'%',
					height: 100*imgParams.height/container.height()+'%',
					marginLeft: 100*imgParams.marginLeft/container.width()+'%'
				}))
				.appendTo(effectCont);
			
			
			// add new image 
			var newCont = $('<div>').css({
					position:'absolute',left:'100%',right:'auto',top:0,width:'0%', height:'100%'
				})
				.append($(images[new_index]).clone().css({
					width: 100*imgParams.width/container.width()+'%',
					height: 100*imgParams.height/container.height()+'%',
					marginLeft: 100*imgParams.marginLeft/container.width()+'%'
				}))
				.appendTo(effectCont);


			// show tempory moving
			effectCont.css({left:'auto',right:'auto',top:0}).css(dir,0).show();
			// hide basic container
			effectCont.show();
			ul.hide();
			
			newCont.animate({width:'100%',left:0}, options.duration, "easeInOutExpo",function(){
				$(this).remove();
			});
			
			curCont.animate({width:0}, options.duration, "easeInOutExpo", function(){
				$this.trigger('effectEnd');
				effectCont.empty().hide();//hide().html('');
			});
		}
	}
}
