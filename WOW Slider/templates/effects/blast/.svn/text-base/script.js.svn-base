// blast
// options.cols - columns count
// options.rows - rows count
// options.distance = 1 - flight distance
function ws_blast(options, images, aCont){
    var $ = jQuery;
    var $this = $(this);
    var ul = aCont.find('.ws_list');
    
    var distance = options.distance||1;

    // create parts
    var effectCont = $('<div>').addClass("ws_effect ws_blast");
    var zoomCont = $('<div>').addClass("ws_zoom").appendTo(effectCont);
    var partCont = $('<div>').addClass("ws_parts").appendTo(effectCont);
    aCont.css({ overflow:'visible' }).append(effectCont);
    effectCont.css({
        position:'absolute',
        left: 0,
        top: 0,
        width: '100%',
        height: '100%',
        'z-index':8
    });

    
    var columns = options.cols; 
    var rows = options.rows;
    var partsOut = [];
    var partsIn = [];

    function animateMe($obj, css, duration, callback) {
        if(options.support.transform && options.support.transition) {
            if(typeof css.left === 'number' || typeof css.top === 'number')
                css.transform = 'translate3d('+(typeof css.left === 'number'?css.left:0)+'px,'+(typeof css.top === 'number'?css.top:0)+'px,0)';
            delete css.left;
            delete css.top;
            
            if(duration) css.transition = 'all '+duration+'ms ease-in-out';
            else css.transition = '';
            
            $obj.css(css);
            if(callback) $obj.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function() {
                callback();
                $obj.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
            });
        } else {
            delete css.transfrom;
            delete css.transition;

            if(duration) $obj.animate(css, {
                queue: false,
                duration: options.duration,
                complete: callback?callback:0
            });
            else $obj.stop(1).css(css);
        }
    }



    function init(imgCss){
        var cf = Math.max((options.width||effectCont.width())/(options.height||effectCont.height()) || 3, 3);
        columns = columns || Math.round(cf<1? 3: 3*cf); 
        rows = rows || Math.round(cf<1? 3/cf: 3);
        
        
        for (var index=0; index<columns*rows; index++){
            var i = index % columns;
            var j = Math.floor(index/columns);
            
            $([partsIn[index] = document.createElement('div'), partsOut[index] = document.createElement('div')])
                .css({
                    position:'absolute',
                    overflow:'hidden'
                })
                .appendTo(partCont).append($('<img>').css({
                    position:'absolute'
                }));
        };
        
        partsOut = $(partsOut);
        partsIn  = $(partsIn);
        
        setPos(partsOut, imgCss);
        setPos(partsIn, imgCss, true);

        var zoomCss = {
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            overflow: 'hidden'
        }
        zoomCont.css(zoomCss).append($('<img>').css(zoomCss));
    }
    

    function setPos(parts, imgCss, random, animate, addCss, callback){
        var cwidth = effectCont.width();
        var cheight = effectCont.height();
        var wpos = {
            left  : $(window).scrollLeft(),
            top   : $(window).scrollTop(),
            width : $(window).width(),
            height: $(window).height()
        };
        
        $(parts).each(function(index){
            var i = index % columns;
            var j = Math.floor(index/columns);
            
            if (random){
                var left0 = distance * cwidth * (2* Math.random() -1) + cwidth/2;
                var top0  = distance * cheight * (2* Math.random() -1) + cheight/2;
                
                var gpos = effectCont.offset();
                gpos.left += left0;
                gpos.top += top0;
                
                if (gpos.left < wpos.left) left0 -= gpos.left + wpos.left;
                if (gpos.top  < wpos.top)   top0 -= gpos.top  + wpos.top;
                var dX = (wpos.left+wpos.width) -gpos.left-cwidth/columns; 
                if (0 > dX ) left0 += dX;
                var dY = (wpos.top +wpos.height)-gpos.top -cheight/rows;
                if (0 > dY)  top0  += dY;
            }else{
                var left0 = cwidth * i/columns;
                var top0  = cheight* j/rows;
            };
            
            $(this).find('img').css({
                left:-(cwidth * i/columns) + imgCss.marginLeft,
                top :-(cheight* j/rows) + imgCss.marginTop,
                width: imgCss.width,
                height: imgCss.height
            });
            
            var style = {
                left: left0,
                top : top0,
                width: cwidth/columns,
                height: cheight/rows
            };

            if(addCss) $.extend(style, addCss);

            if (animate)
                animateMe(
                    $(this),
                    style,
                    options.duration,
                    (index === 0 && callback)?callback:0
                );
            else
                animateMe($(this),style);
        })
    };
    
    
    
    this.go = function(new_index, curIdx){
        var curImg = $(images[curIdx]),
            imgCss = {
                width: curImg.width(),
                height: curImg.height(),
                marginTop: parseFloat(curImg.css('marginTop')),
                marginLeft: parseFloat(curImg.css('marginLeft'))
            };

        if (!partsOut.length) init(imgCss);
        
        partsOut.find('img').attr('src', images.get(curIdx).src);
        animateMe(partsOut, { opacity: 1, zIndex: 3 });
        
        partsIn.find('img').attr('src', images.get(new_index).src);
        animateMe(partsIn, { opacity: 0, zIndex: 2 });
        
        zoomCont.find('img').attr('src', images.get(curIdx).src);
        animateMe(zoomCont.find('img'), {
            transform: 'scale(1)'
        });

        effectCont.show();

        ul.hide();

        // start
        setPos(partsIn, imgCss, false, true, { opacity: 1 });
        setPos(partsOut, imgCss, true, true, { opacity: 0 }, function() {
            $this.trigger('effectEnd');
            effectCont.hide();
        });

        animateMe(zoomCont.find('img'), {
            transform: 'scale(2)'
        }, options.duration, 0);

        var tmp = partsIn; partsIn = partsOut; partsOut = tmp; // swap
    }
}
