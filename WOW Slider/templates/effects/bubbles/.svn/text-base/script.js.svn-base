// bubbles
function ws_bubbles(options, images, container){
	var $ = jQuery;
	var $this = $(this);
	var noCanvas = options.noCanvas || !document.createElement("canvas").getContext;
	var w = options.width, h = options.height;
	var effectCont = $('<div>')
		.css({
			position: 'absolute',
			top: 0,
			left: 0,
			width: '100%',
			height: '100%',
			overflow: 'hidden'
		})
		.addClass('ws_effect ws_bubbles').appendTo(container);

	if(!noCanvas) {
		var canvas = $('<canvas>').css({
				position:'absolute',
				left:0,
				top:0,
				width: '100%',
				height: '100%'
			}).appendTo(effectCont);
		var ctx = canvas.get(0).getContext('2d');
	}

	var easings = {
		easeOutBack: function (x, t, b, c, d, s) {
			if (s == undefined) s = 1.70158;
			return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
		},
		easeOutBackCubic: function (x, t, b, c, d, s) {
			var ts=(t/=d)*t;
			return b+c*(-1.5*ts*t*ts + 2*ts*ts + 4*ts*t + -9*ts + 5.5*t);
		},
		easeOutCubic: function (x, t, b, c, d) {
			return c*((t=t/d-1)*t*t + 1) + b;
		},
		easeOutExpo: function (x, t, b, c, d) {
			return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
		}
	}

	// default bubble colors
	// 0 - default color
	// 1 - default x offset
	// 2 - default y offset
	// 3 - default radius
	var bubbleDefaults = [
		['#bbbbbb',  0.5,   0.5],
		['#b3b3b3',  0.2,   0.2],
		['#b6b6b6',  0.5,   0.2],
		['#b9b9b9',  0.8,   0.2],
		['#cccccc',  0.2,   0.8],
		['#c3c3c3',  0.5,   0.8],
		['#c6c6c6',  0.8,   0.8]
	];

	/*
		CURRENT
		[0, 1, 0.1, 0.3]

		MEANING
		[x offset, y offset, delay, duration]
	*/
	var startBubbles = [
		[/*   X      Y     R       Del    */
			[ 0.5,   0.5,  0.7,    0.15 ],
			[ 0.5,   0.5,  0.6,    0.3  ],
			[ 0.5,   0.5,  0.5,    0.45 ],
			[ 0.5,   0.5,  0.4,    0.6  ],
			[ 0.5,   0.5,  0.3,    0.75 ],
			[ 0.5,   0.5,  0.2,    0.9  ],
			[ 0.5,   0.5,  0.1,    1    ]
		],
		[/*   X      Y     R       Del  */
			[ 0.5,   0.5,  0.7,    1    ],
			[ 0.5,   0.5,  0.6,    0.9  ],
			[ 0.5,   0.5,  0.5,    0.75 ],
			[ 0.5,   0.5,  0.4,    0.6  ],
			[ 0.5,   0.5,  0.3,    0.45 ],
			[ 0.5,   0.5,  0.2,    0.3  ],
			[ 0.5,   0.5,  0.1,    0.15 ]
		]
	];
	var endBubbles = [
		[/*   X      Y     R     Del  */
			[ 0.5,   0.5,  0,    1    ],
			[ 0.5,   0.5,  0,    0.9  ],
			[ 0.5,   0.5,  0,    0.75 ],
			[ 0.5,   0.5,  0,    0.6  ],
			[ 0.5,   0.5,  0,    0.45 ],
			[ 0.5,   0.5,  0,    0.3  ],
			[ 0.5,   0.5,  0,    0.15 ]
		],
		[/*   X      Y     R     Del  */
			[ 0.5,   0.5,  0,    0.15 ],
			[ 0.5,   0.5,  0,    0.3  ],
			[ 0.5,   0.5,  0,    0.45 ],
			[ 0.5,   0.5,  0,    0.6  ],
			[ 0.5,   0.5,  0,    0.75 ],
			[ 0.5,   0.5,  0,    0.9  ],
			[ 0.5,   0.5,  0,    1    ]
		],
		[/*   X      Y     R       Del  */
			[ 0.5,   7.5,  0.7,    0.75 ],
			[ 0.5,   7.5,  0.6,    0.15 ],
			[ 0.5,   7.5,  0.5,    1    ],
			[ 0.5,   7.5,  0.4,    0.3  ],
			[ 0.5,   7.5,  0.3,    0.45 ],
			[ 0.5,   7.5,  0.2,    0.6  ],
			[ 0.5,   7.5,  0.1,    0.9  ]
		],
		[/*   X      Y     R       Del  */
			[ 0.5,   7.5,  0.7,    1    ],
			[ 0.5,   7.5,  0.6,    0.9  ],
			[ 0.5,   7.5,  0.5,    0.75 ],
			[ 0.5,   7.5,  0.4,    0.6  ],
			[ 0.5,   7.5,  0.3,    0.45 ],
			[ 0.5,   7.5,  0.2,    0.3  ],
			[ 0.5,   7.5,  0.1,    0.15 ]
		]
	];


	function getRandomFromArr(obj) {
		if(Object.prototype.toString.call(obj) === '[object Array]') {
			return obj[Math.floor(Math.random()*(obj.length))];
		} else {
		    var result;
		    var count = 0;
		    for (var prop in obj)
		        if (Math.random() < 1/++count)
		           result = prop;
		    return /linear|swing/g.test(result)?getRandomFromArr(obj):result;
		}
	}


    // prepare bubbles params and draw it on canvas
    // @ctx      {{context}} - canvas context
    // @a        {{double}}  - current state from 0 to 1
    // @bubbles  {{object}}  - list of bubbles params
    // @ease     {{string}}  - name of easing function
    function drawBubbles(ctx, a, bubbles, fromBubbles, ease) {
		ctx.clearRect(0, 0, w, h); // clear old canvas

		for(var k = 0, len = bubbles.length; k < len; k++) {
			// get current bubble params
			var progress = Math.max(0, Math.min( 1, a - bubbles[k][3]*(1-a)  ));

			// use easing
			// (x, t, b, c, d, s)
			// t: current time, b: begInnIng value, c: change In value, d: duration
			if(ease && easings[ease])
				progress = easings[ease](1, progress, 0, 1, 1, 1);

			// when width/width ~ 1.8 - bubbles no fill all canvas
			var radiusMul = w;
			if(w/h <= 1.8 && w/h > 0.7) {
				radiusMul *= 2;
			} else if (w/h <= 0.7) {
				radiusMul = h*2;
			}

			var radius = bubbles[k][2]*progress*radiusMul

			if(fromBubbles) {
				radius = (bubbles[k][2]+(fromBubbles[k][2]-bubbles[k][2])*progress)*radiusMul;
			}

			// radius must be positive
			radius = Math.max(0, radius);

			// draw current bubble
			ctx.beginPath();
			ctx.arc(
				// x
				(bubbles[k][0]+((fromBubbles?fromBubbles[k][0]:0.5)-bubbles[k][0])*progress)*w,
				// y
				(bubbles[k][1]+((fromBubbles?fromBubbles[k][1]:0.5)-bubbles[k][1])*progress)*h,
				// r
				radius,
				// bubbles[k][2]*progress*radiusMul,
				0, 2 * Math.PI, false
			);
			ctx.fillStyle = bubbleDefaults[k][0];
			ctx.fill();
		}
    }

	this.go = function(new_index, curIdx){
		// if no canvas use fallback - slide
		if(noCanvas) {
			container.find('.ws_list').css('transform', 'translate3d(0,0,0)').stop(true).animate(
				// opera do bug for "0%"
				// safari (win?) do bug for 0
				{left: (new_index?-new_index+"00%":(/Safari/.test(navigator.userAgent)?"0%":0))},
				options.duration,
				"easeInOutExpo",
				function() {$this.trigger('effectEnd')}
			);
		}

		// use canvas effect
		else {
			w = container.width();
			h = container.height();
			canvas.attr({width: w, height: h});

			var img = images.get(curIdx);
			// update bubbles colors
			for(var k = 0, len = bubbleDefaults.length; k < len; k++) {
				var curX = Math.abs(bubbleDefaults[k][1]),
					curY = Math.abs(bubbleDefaults[k][2]);
				
				bubbleDefaults[k][0] = RGBaster(img, {
					x: curX*w,
					y: curY*h,
					w: 2,
					h: 2
				}) || bubbleDefaults[k][0];
			}

			var start = getRandomFromArr(startBubbles);
			var end = getRandomFromArr(endBubbles);
			var curEasing = getRandomFromArr(easings);

			// start animation
			wowAnimate(function(a) {
					drawBubbles(ctx, a, start, 0, curEasing);
				}, 0, 1,
				options.duration/2,
				function() {
					container.find('.ws_list').css({
						left: (new_index?-new_index+"00%":(/Safari/.test(navigator.userAgent)?"0%":0))
					});
					curEasing = getRandomFromArr(easings);

					wowAnimate(function(a) {
							drawBubbles(ctx, 1-a, end, start, curEasing);
						}, 0, 1,
						options.duration/2,
						function() {
							ctx.clearRect(0, 0, w, h);
							$this.trigger('effectEnd');
						}
					);
				}
			);
		}
	}


	// Get Dominant Color Function
	// Include RGBaster - https://github.com/briangonzalez/rgbaster.js
	// modifed - wowslider.com
	function RGBaster(img, opts) {
		opts = opts || {};
		var BLOCKSIZE = 1,
			exclude = opts.exclude || [ ], // for example, to exlude white and black:	[ '0,0,0', '255,255,255' ]
			data;

		var canvas = document.createElement("canvas"),
			context = canvas.getContext('2d'),
			width  = canvas.width  = img.naturalWidth,
			height = canvas.height = img.naturalHeight;
		context.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);
		
		try {
			data = context.getImageData(opts.x?opts.x:0, opts.y?opts.y:0, opts.w?opts.w:img.width, opts.h?opts.h:img.height)['data'];
		} catch(e) {
			/* wowslider.com changes

			console.log("error:unable to access image data: " + e)
			return '#ccc';
			*/
			return false;
		}


		var length = (opts.w?opts.w:img.width * opts.h?opts.h:img.height) || data.length,
			colorCounts = {},
			rgbString = '',
			rgb = [],
			colors = {
				dominant: { name: '', count: 0 }
			};

		// Loop over all pixels, in BLOCKSIZE iterations.
		var i = 0;
		while ( i < length ) {
			rgb[0] = data[i];
			rgb[1] = data[i+1];
			rgb[2] = data[i+2];
			rgbString = rgb.join(",");

			// Keep track of counts.
			if ( rgbString in colorCounts ) {
				colorCounts[rgbString] = colorCounts[rgbString] + 1;
			}
			else{
				colorCounts[rgbString] = 1;
			}

			// Find dominant and palette, ignoring those colors in the exclude list.
			if ( exclude.indexOf( ['rgb(', rgbString, ')'].join('') ) === -1 ) {
				var colorCount = colorCounts[rgbString];
				if ( colorCount > colors.dominant.count ){
					colors.dominant.name = rgbString;
					colors.dominant.count = colorCount;
				}
			}

			// Increment!
			i += BLOCKSIZE * 4;
		}

		return ['rgb(', colors.dominant.name, ')'].join('');
	};
}